name: Docker CI build docker images and push

on:
  push:
    branches: [dev, main]
  pull_request:
    branches: [dev]
    types: [opened, synchronize, reopened]

jobs:
  build-frontend:
    if: github.event_name == 'push'
    runs-on: self-hosted
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}

    steps:
      - uses: actions/checkout@v3

      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_UNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWD }}

      - name: Set Docker Tag
        id: set_tag
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "tag=v1.0.0" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_name }}" == "dev" ]; then
            echo "tag=dev-${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Frontend
        run: |
          docker build \
            --build-arg VITE_CLERK_PUBLISHABLE_KEY=${{ vars.FRONTEND_VITE_CLERK_PUBLISHABLE_KEY }} \
            --build-arg VITE_URL_ADDR=${{ vars.FRONTEND_VITE_URL_ADDR }} \
            -f ./frontend/frontend.Dockerfile \
            -t safalkarki/frontend:${{ steps.set_tag.outputs.tag }} ./frontend

          docker push safalkarki/frontend:${{ steps.set_tag.outputs.tag }}

  build-backends:
    if: github.event_name == 'push'
    runs-on: self-hosted2
    needs: build-frontend   # Optional: Only if you want backend to wait for frontend to finish
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}

    steps:
      - uses: actions/checkout@v3

      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_UNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWD }}

      - name: Set Docker Tag
        id: set_tag
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            echo "tag=v1.0.0" >> $GITHUB_OUTPUT
          elif [ "${{ github.ref_name }}" == "dev" ]; then
            echo "tag=dev-${{ github.sha }}" >> $GITHUB_OUTPUT
          else
            echo "tag=${{ github.ref_name }}-${{ github.sha }}" >> $GITHUB_OUTPUT
          fi

      - name: Build and Push Backend1
        run: |
          docker build -f ./backend1/backend1.Dockerfile -t safalkarki/backend1:${{ steps.set_tag.outputs.tag }} ./backend1
          docker push safalkarki/backend1:${{ steps.set_tag.outputs.tag }}

      - name: Build and Push Backend2
        run: |
          docker build -f ./backend2/backend2.Dockerfile -t safalkarki/backend2:${{ steps.set_tag.outputs.tag }} ./backend2
          docker push safalkarki/backend2:${{ steps.set_tag.outputs.tag }}

  pr-checks:
    if: github.event_name == 'pull_request'
    runs-on: self-hosted
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Conventional Commit Check
        uses: wagoid/commitlint-github-action@v5

      - name: Check for sensitive data in env files
        run: |
          echo "Checking for exposed secrets in .env files..."
          if grep -r "sk_test_\|pk_test_\|sk_live_\|pk_live_" --include="*.env" . 2>/dev/null | grep -v "placeholder\|example\|your_key_here"; then
            echo "Found potential exposed secrets in .env files"
            exit 1
          else
            echo "No exposed secrets found"
          fi

      - name: Dockerfile existence check
        run: |
          echo "Checking if required Dockerfiles exist..."
          missing_files=0
          
          if [[ ! -f "./frontend/frontend.Dockerfile" ]]; then
            echo "frontend/frontend.Dockerfile not found"
            missing_files=1
          fi
          
          if [[ ! -f "./backend1/backend1.Dockerfile" ]]; then
            echo "backend1/backend1.Dockerfile not found"
            missing_files=1
          fi
          
          if [[ ! -f "./backend2/backend2.Dockerfile" ]]; then
            echo "backend2/backend2.Dockerfile not found"
            missing_files=1
          fi
          
          if [ $missing_files -eq 1 ]; then
            exit 1
          fi
          
          echo "All required Dockerfiles found"
