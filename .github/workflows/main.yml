name: Docker CI build docker images and push

on:
  push:
    branches: [dev, main]
    paths:
      - 'frontend/**'
      - 'backend1/**' 
      - 'backend2/**'
      - '.github/workflows/**'
  pull_request:
    branches: [dev]
    types: [opened, synchronize, reopened]
    paths:
      - 'frontend/**'
      - 'backend1/**'
      - 'backend2/**'
      - '.github/workflows/**'

jobs:
  changes:
    runs-on: ubuntu-latest
    outputs:
      frontend: ${{ steps.changes.outputs.frontend }}
      backend: ${{ steps.changes.outputs.backend }}
    steps:
      - uses: actions/checkout@v3
      - uses: dorny/paths-filter@v2
        id: changes
        with:
          filters: |
            frontend:
              - 'frontend/**'
            backend:
              - 'backend1/**'
              - 'backend2/**'


  build-frontend:
    if: github.event_name == 'push' && needs.changes.outputs.frontend == 'true' # if this condition is true, run this job otherwise skip it
    needs: changes
    runs-on: v1  # frontend runner
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}

    steps:
      - uses: actions/checkout@v3

      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_UNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWD }}

      - name: Get version
        id: get-version
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            git fetch --tags
            latest_version=$(git tag --sort=-version:refname | head -n 1)
            
            if [ -z "$latest_version" ]; then
              echo "Using default version 1.0.0 because no tags were found"
              new_version="1.0.0"
            else
              new_version=$(semver bump patch "$latest_version")
            fi
            
            git tag "$new_version"
            git push origin "$new_version"
            
          else
            new_version="${{ github.ref_name }}-${{ github.sha }}"
          fi
          
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "Using version: $new_version"
        
      - name: Build and Push Frontend
        run: |
          docker build \
            --build-arg VITE_CLERK_PUBLISHABLE_KEY=${{ vars.FRONTEND_VITE_CLERK_PUBLISHABLE_KEY }} \
            --build-arg VITE_URL_ADDR=${{ vars.FRONTEND_VITE_URL_ADDR }} \
            -f ./frontend/frontend.Dockerfile \
            -t safalkarki/frontend:${{ steps.get-version.outputs.new_version }} ./frontend

          docker push safalkarki/frontend:${{ steps.get-version.outputs.new_version }}

  build-backends:
    if: github.event_name == 'push' && needs.changes.outputs.backend == 'true'
    needs: changes
    runs-on: v2   # backend runner
    environment: ${{ github.ref_name == 'main' && 'production' || 'development' }}

    steps:
      - uses: actions/checkout@v3

      - name: DockerHub Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_UNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWD }}

      - name: Get version
        id: get-version
        run: |
          if [ "${{ github.ref_name }}" == "main" ]; then
            git fetch --tags
            latest_version=$(git tag --sort=-version:refname | head -n 1)
            
            if [ -z "$latest_version" ]; then
              echo "Using default version 1.0.0 because no tags were found"
              new_version="1.0.0"
            else
              new_version=$(semver bump patch "$latest_version")
            fi
            
            # Create and push the new tag
            git tag "$new_version"
            git push origin "$new_version"
            
          else
            new_version="${{ github.ref_name }}-${{ github.sha }}"
          fi
          
          echo "new_version=$new_version" >> $GITHUB_OUTPUT
          echo "Using version: $new_version"

      - name: Build and Push Backend1
        run: |
          docker build -f ./backend1/backend1.Dockerfile -t safalkarki/backend1:${{ steps.get-version.outputs.new_version }} ./backend1
          docker push safalkarki/backend1:${{ steps.get-version.outputs.new_version }}

      - name: Build and Push Backend2
        run: |
          docker build -f ./backend2/backend2.Dockerfile -t safalkarki/backend2:${{ steps.get-version.outputs.new_version }} ./backend2
          docker push safalkarki/backend2:${{ steps.get-version.outputs.new_version }}

  pr-checks:
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Conventional Commit Check
        uses: wagoid/commitlint-github-action@v5

      - name: Check for sensitive data in env files
        run: |
          echo "Checking for exposed secrets in .env files..."
          if grep -r "sk_test_\|pk_test_\|sk_live_\|pk_live_" --include="*.env" . 2>/dev/null | grep -v "placeholder\|example\|your_key_here"; then
            echo "Found potential exposed secrets in .env files"
            exit 1
          else
            echo "No exposed secrets found"
          fi

      - name: Dockerfile existence check
        run: |
          echo "Checking if required Dockerfiles exist..."
          missing_files=0
          
          if [[ ! -f "./frontend/frontend.Dockerfile" ]]; then
            echo "frontend/frontend.Dockerfile not found"
            missing_files=1
          fi
          
          if [[ ! -f "./backend1/backend1.Dockerfile" ]]; then
            echo "backend1/backend1.Dockerfile not found"
            missing_files=1
          fi
          
          if [[ ! -f "./backend2/backend2.Dockerfile" ]]; then
            echo "backend2/backend2.Dockerfile not found"
            missing_files=1
          fi
          
          if [ $missing_files -eq 1 ]; then
            exit 1
          fi
          
          echo "All required Dockerfiles found"